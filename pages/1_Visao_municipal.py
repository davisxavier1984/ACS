import streamlit as st
import pandas as pd
import json
import os
from pathlib import Path
from datetime import datetime
from dateutil.relativedelta import relativedelta
import plotly.graph_objects as go
import plotly.express as px
from acs_analyzer import ACSAnalyzer
from saude_api import SaudeApi
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, PageBreak
from reportlab.lib.units import inch, cm
from PIL import Image as PILImage
import io
import base64
from pdf_generator import gerar_pdf_municipal

# Constante para c√°lculo de valores esperados
VALOR_REPASSE_POR_ACS = 3036.00

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard ACS - An√°lise Municipal",
    page_icon="üèòÔ∏è", 
    layout="wide"
)

def formatar_moeda_brasileira(valor: float) -> str:
    """
    Formata um valor num√©rico para o padr√£o de moeda brasileira com abrevia√ß√µes Mil e Mi
    """
    if valor is None:
        return "R$ 0,00"
    
    if valor >= 1_000_000:
        return f"R$ {valor/1_000_000:.1f}Mi"
    elif valor >= 1_000:
        return f"R$ {valor/1_000:.0f}Mil"
    else:
        # Para valores menores que 1000, manter formato original
        valor_formatado = f"{valor:,.2f}"
        partes = valor_formatado.split('.')
        parte_inteira = partes[0]
        parte_decimal = partes[1] if len(partes) > 1 else "00"
        parte_inteira = parte_inteira.replace(',', '.')
        return f"R$ {parte_inteira},{parte_decimal}"

def plotly_to_image(fig, width=800, height=400, dpi=150):
    """
    Converte um gr√°fico Plotly para PIL Image com manejo adequado de mem√≥ria e qualidade
    """
    try:
        # Garantir fundo branco e margens adequadas
        fig.update_layout(
            plot_bgcolor='white', 
            paper_bgcolor='white',
            margin=dict(l=40, r=40, t=50, b=40)  # Margens adequadas
        )
        
        # Gerar imagem com qualidade melhorada
        img_bytes = fig.to_image(
            format="png", 
            width=width, 
            height=height,
            scale=dpi/72  # Converter DPI para fator de escala
        )
        
        # Retornar PIL Image (ser√° fechada pelo caller)
        return PILImage.open(io.BytesIO(img_bytes))
        
    except Exception as e:
        print(f"Erro ao converter gr√°fico Plotly: {e}")
        # Retornar None em caso de erro (ser√° tratado pelo caller)
        return None

# The old monolithic gerar_pdf_municipal function has been replaced
# with the new modular PDFGenerator class imported from pdf_generator.py
# This provides better resource management, error handling, and maintainability



# Ler par√¢metros da URL para drill-down
query_params = st.query_params
uf_param = query_params.get("uf", None)
municipio_ibge_param = query_params.get("municipio_ibge", None)
competencia_param = query_params.get("competencia", None)

def carregar_dados_locais_municipio(codigo_municipio: str, competencias: list) -> dict:
    """
    Carrega dados locais para um munic√≠pio espec√≠fico e compet√™ncias espec√≠ficas
    
    Args:
        codigo_municipio: C√≥digo IBGE do munic√≠pio
        competencias: Lista de compet√™ncias no formato "AAAA/MM"
        
    Returns:
        Dict com dados encontrados por compet√™ncia
    """
    dados_encontrados = {}
    data_dir = Path("data")
    json_files = list(data_dir.glob("dados_*.json"))
    
    for competencia in competencias:
        dados_encontrados[competencia] = None
        
        for file_path in json_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    dados_brutos = json.load(f)
                
                # Verificar se esta compet√™ncia est√° nos metadados
                metadados_competencias = dados_brutos.get('metadados', {}).get('competencias', [])
                if competencia not in metadados_competencias:
                    continue
                
                # Buscar o munic√≠pio nos resultados
                resultados = dados_brutos.get('resultados', [])
                for resultado in resultados:
                    if str(resultado.get('codigo_municipio', '')) == str(codigo_municipio):
                        # Verificar se tem dados para esta compet√™ncia espec√≠fica
                        dados_processados = ACSAnalyzer.processar_dados_coletados([resultado])
                        df_temp = pd.DataFrame(dados_processados)
                        
                        # Filtrar pela compet√™ncia
                        df_competencia = df_temp[df_temp['competencia'] == competencia]
                        if not df_competencia.empty:
                            dados_encontrados[competencia] = df_competencia.iloc[0].to_dict()
                            break
                
                if dados_encontrados[competencia] is not None:
                    break
                    
            except Exception as e:
                st.warning(f"Erro ao ler arquivo {file_path}: {e}")
                continue
    
    return dados_encontrados

def buscar_dados_api(codigo_uf: str, codigo_municipio: str, competencia: str) -> dict:
    """
    Busca dados via API para uma compet√™ncia espec√≠fica e os formata
    para serem processados pelo ACSAnalyzer.processar_dados_coletados
    """
    dados_brutos_api = SaudeApi.get_dados_pagamento(codigo_uf, codigo_municipio, competencia)
    
    if dados_brutos_api is None:
        return None
    
    # Formatar para simular a sa√≠da de um √∫nico item do coletor
    # ACSAnalyzer.processar_dados_coletados espera uma lista de dicion√°rios,
    # onde cada dicion√°rio tem chaves como 'municipio', 'competencia', 'dados', 'status'
    
    municipio_nome = "Nome Desconhecido" # Ser√° preenchido pelo ACSAnalyzer se dispon√≠vel nos dados brutos
    if dados_brutos_api and 'pagamentos' in dados_brutos_api and dados_brutos_api['pagamentos']:
        # Tenta extrair o nome do munic√≠pio do primeiro registro de pagamento, se dispon√≠vel
        first_payment_record = dados_brutos_api['pagamentos']
        if first_payment_record and 'noMunicipio' in first_payment_record:
            municipio_nome = first_payment_record['noMunicipio']


    # Retornar o dicion√°rio no formato que o ACSAnalyzer.processar_dados_coletados espera
    # (um item da lista 'resultados' do JSON salvo)
    resultado_formatado = {
        'uf': SaudeApi.extrair_sigla_uf(codigo_uf), # Extrai sigla da UF
        'codigo_uf': codigo_uf,
        'municipio': municipio_nome,
        'codigo_municipio': codigo_municipio,
        'competencia': competencia, # Formato AAAA/MM
        'timestamp_coleta': datetime.now().isoformat(),
        'status': 'sucesso',
        'dados': dados_brutos_api # O JSON bruto completo da API vai para a chave 'dados'
    }
    
    # Agora, passe esta lista contendo UM item para ACSAnalyzer.processar_dados_coletados
    # A fun√ß√£o processar_dados_coletados j√° espera uma LISTA
    dados_processados = ACSAnalyzer.processar_dados_coletados([resultado_formatado])

    if dados_processados:
        return dados_processados[0] # Retorna o primeiro item processado (que √© o √∫nico)
    
    return None # Retorna None se n√£o conseguir processar

def calcular_variacao_mensal(dados_atual, df_3_meses) -> float:
    """
    Calcula a varia√ß√£o mensal usando a mesma l√≥gica da tabela.
    
    Args:
        dados_atual: Linha mais recente (dados do m√™s atual)
        df_3_meses: DataFrame completo com dados dos 3 meses
        
    Returns:
        float: Varia√ß√£o mensal (atual - anterior). Negativo = perda
    """
    if dados_atual is None or df_3_meses is None or len(df_3_meses) < 2:
        return 0
    
    # dados_atual √© df_3_meses.iloc[0] (mais recente)
    # mes_anterior √© df_3_meses.iloc[1] (segundo mais recente)
    valor_atual = dados_atual.get('vlTotalAcs', 0)
    mes_anterior = df_3_meses.iloc[1]
    valor_anterior = mes_anterior.get('vlTotalAcs', 0)
    
    # Varia√ß√£o mensal: atual - anterior (igual √† tabela)
    variacao_mensal = valor_atual - valor_anterior
    return variacao_mensal

def detectar_condicoes_suspensao(dados_atual, df_3_meses) -> bool:
    """
    Detecta condi√ß√µes que indicam suspens√£o de recursos ACS.
    Crit√©rio: qualquer perda mensal (varia√ß√£o negativa).
    
    Args:
        dados_atual: Pandas Series com dados do munic√≠pio (linha mais recente)
        df_3_meses: DataFrame completo para calcular varia√ß√£o mensal
        
    Returns:
        bool: True se devemos mostrar o alerta de suspens√£o (sempre que h√° perda mensal)
    """
    # Verificar se dados_atual √© None ou Series/DataFrame vazio
    if dados_atual is None:
        return False
    
    # Para pandas Series, verificar se est√° vazio
    if hasattr(dados_atual, 'empty') and dados_atual.empty:
        return False
    
    # Calcular varia√ß√£o mensal usando a mesma l√≥gica da tabela
    variacao_mensal = calcular_variacao_mensal(dados_atual, df_3_meses)
    
    # Crit√©rio simples: mostrar sempre que h√° perda mensal (varia√ß√£o negativa)
    # Isso corresponde aos valores vermelhos na tabela
    return variacao_mensal < 0

def render_suspension_status_card(dados_atual, df_3_meses, municipio: str):
    """
    Renderiza o card de alerta regulamentar com informa√ß√µes da Portaria GM/MS 6.907.
    
    Args:
        dados_atual: Pandas Series com dados do munic√≠pio (linha mais recente)
        df_3_meses: DataFrame completo para calcular varia√ß√£o mensal
        municipio: Nome do munic√≠pio para exibi√ß√£o
    """
    # Calcular varia√ß√£o mensal usando a mesma l√≥gica da tabela
    variacao_mensal = calcular_variacao_mensal(dados_atual, df_3_meses)
    
    # Usar o valor absoluto da varia√ß√£o (para mostrar a perda como valor positivo)
    valor_perda = abs(variacao_mensal)
    
    # Usar fun√ß√£o existente para formatar moeda
    valor_formatado = formatar_moeda_brasileira(valor_perda)
    
    # Renderizar card de alerta usando st.error para destaque visual m√°ximo
    st.error(f"""
üö® **ALERTA REGULAMENTAR - {municipio}**

**Portaria GM/MS N¬∫ 6.907, de 29 de abril de 2025**

**Motivo da Suspens√£o:** Observadas 6 (seis) compet√™ncias consecutivas de aus√™ncia de envio de informa√ß√£o sobre a produ√ß√£o ao Sistema de Informa√ß√£o em Sa√∫de para a Aten√ß√£o B√°sica (SISAB).

Suspens√£o do recurso do ACS.

**PERDA APROXIMADAMENTE {valor_formatado}/M√äS**
    """)

def gerar_ultimas_competencias(competencia_referencia: str, qtd: int = 3) -> list:
    """
    Gera lista das √∫ltimas compet√™ncias a partir de uma compet√™ncia de refer√™ncia
    
    Args:
        competencia_referencia: Compet√™ncia no formato "AAAA/MM"
        qtd: Quantidade de compet√™ncias a retornar
        
    Returns:
        Lista de compet√™ncias em ordem decrescente
    """
    try:
        ano, mes = map(int, competencia_referencia.split('/'))
        data_ref = datetime(ano, mes, 1)
        
        competencias = []
        for i in range(qtd):
            data_comp = data_ref - relativedelta(months=i)
            comp_str = f"{data_comp.year}/{data_comp.month:02d}"
            competencias.append(comp_str)
        
        return competencias
    except Exception as e:
        st.error(f"Erro ao gerar compet√™ncias: {e}")
        return []

# --- Interface Principal ---
# Logo e cabe√ßalho
col_logo, col_title = st.columns([1, 4])

with col_logo:
    st.image("logo.png", width=120)

with col_title:
    st.title("üèòÔ∏è Dashboard ACS - An√°lise Municipal")
    st.markdown("**Sistema de an√°lise detalhada dos Agentes Comunit√°rios de Sa√∫de por munic√≠pio**")

# Informa√ß√µes sobre navega√ß√£o entre p√°ginas
with st.expander("üìå Sobre o Sistema ACS"):
    st.markdown("""
    **üèòÔ∏è P√°gina Atual: An√°lise Municipal (P√°gina Principal)**
    - An√°lise detalhada de um munic√≠pio espec√≠fico nos √∫ltimos 3 meses
    - Dados hist√≥ricos e comparativos
    - Visualiza√ß√µes financeiras e de pessoal
    
    **üìë Outras An√°lises Dispon√≠veis:**
    - **Vis√£o Estadual**: Compara√ß√£o entre munic√≠pios de um estado
    - **An√°lise Multi-Compet√™ncia**: Relat√≥rio temporal completo com m√∫ltiplas compet√™ncias
    
    **üí° Dica**: Use a barra lateral para navegar entre as diferentes vis√µes!
    """)

st.markdown("---")

# Seletores
col1, col2 = st.columns(2)

with col1:
    st.subheader("üîç Sele√ß√£o de Localiza√ß√£o")
    
    # Carregar UFs
    ufs = SaudeApi.get_ufs()
    ufs_formatadas = [SaudeApi.formatar_uf_para_dropdown(uf) for uf in ufs]
    
    # Encontrar o √≠ndice do UF que veio como par√¢metro
    default_uf_index = 0
    if uf_param and uf_param in [uf['codigo'] for uf in ufs]:
        default_uf_index = [uf['codigo'] for uf in ufs].index(uf_param)
    
    uf_selecionada = st.selectbox("Estado (UF):", ufs_formatadas, index=default_uf_index)
    
    # Extrair c√≥digo da UF selecionada
    codigo_uf = SaudeApi.extrair_codigo_uf(uf_selecionada, ufs)
    
    # Carregar munic√≠pios se UF foi selecionada
    municipios = []
    if codigo_uf:
        municipios = SaudeApi.get_municipios_por_uf(codigo_uf)
        municipios_formatados = [SaudeApi.formatar_municipio_para_dropdown(mun) for mun in municipios]
        
        # Encontrar o √≠ndice do munic√≠pio que veio como par√¢metro
        default_municipio_index = 0
        if municipio_ibge_param and municipio_ibge_param in [mun['codigo'] for mun in municipios]:
            default_municipio_index = [mun['codigo'] for mun in municipios].index(municipio_ibge_param)
        
        municipio_selecionado = st.selectbox("Munic√≠pio:", municipios_formatados, index=default_municipio_index)
        codigo_municipio = SaudeApi.extrair_codigo_municipio(municipio_selecionado, municipios)
    else:
        st.warning("Selecione uma UF v√°lida")
        codigo_municipio = None

with col2:
    st.subheader("üìÖ Per√≠odo de An√°lise")
    
    # Compet√™ncia de refer√™ncia
    competencia_referencia = st.selectbox(
        "Compet√™ncia de Refer√™ncia:",
        ["2025/07", "2025/06", "2025/05", "2025/04", "2025/03", "2025/02", "2025/01",
         "2024/12", "2024/11", "2024/10", "2024/09", "2024/08", "2024/07"]
    )
    
    # Bot√£o de an√°lise
    analisar_manualmente = st.button("üîç Analisar Munic√≠pio", type="primary", use_container_width=True)

# Processamento quando bot√£o for clicado OU quando par√¢metros da URL estiverem presentes
if ((uf_param and municipio_ibge_param) or analisar_manualmente) and codigo_uf and codigo_municipio and competencia_referencia:
    
    # Gerar compet√™ncias dos √∫ltimos 3 meses
    competencias_desejadas = gerar_ultimas_competencias(competencia_referencia, 3)
    
    # Tentar carregar dados locais primeiro
    dados_locais = carregar_dados_locais_municipio(codigo_municipio, competencias_desejadas)
    
    # Buscar dados ausentes via API
    dados_finais = []
    
    for comp in competencias_desejadas:
        if dados_locais[comp] is not None:
            # Usar dados locais
            dados_finais.append(dados_locais[comp])
        else:
            # Buscar via API
            dados_api = buscar_dados_api(codigo_uf, codigo_municipio, comp)
            
            if dados_api is not None:
                dados_finais.append(dados_api)
    
    # Processar dados e criar dashboard
    if dados_finais:
        df_3_meses = pd.DataFrame(dados_finais)
        
        # Adicionar colunas calculadas se n√£o existirem
        if 'qtTotalCredenciado' not in df_3_meses.columns:
            df_3_meses['qtTotalCredenciado'] = (
                df_3_meses.get('qtAcsDiretoCredenciado', 0) + 
                df_3_meses.get('qtAcsIndiretoCredenciado', 0)
            )
        
        if 'qtTotalPago' not in df_3_meses.columns:
            df_3_meses['qtTotalPago'] = (
                df_3_meses.get('qtAcsDiretoPgto', 0) + 
                df_3_meses.get('qtAcsIndiretoPgto', 0)
            )
        
        if 'vlTotalAcs' not in df_3_meses.columns:
            df_3_meses['vlTotalAcs'] = (
                df_3_meses.get('vlTotalAcsDireto', 0) + 
                df_3_meses.get('vlTotalAcsIndireto', 0)
            )
        
        # Adicionar coluna valor esperado (baseado em ACS credenciados diretos e valor oficial de repasse)
        df_3_meses['vlEsperado'] = df_3_meses.get('qtAcsDiretoCredenciado', 0) * VALOR_REPASSE_POR_ACS
        
        # Ordenar por compet√™ncia (mais recente primeiro)
        df_3_meses = df_3_meses.sort_values('competencia', ascending=False)
        
        
        # === T√çTULO E CONTEXTO ===
        st.divider()
        st.title(f"üèòÔ∏è Dashboard Municipal - {municipio_selecionado}")
        st.info(f"üìç **Estado:** {uf_selecionada} | **Per√≠odo:** {competencias_desejadas[-1]} a {competencias_desejadas[0]} | **Registros:** {len(df_3_meses)}")
        
        # === KPIs MUNICIPAIS COM DELTAS ===
        st.header("üìä Indicadores Principais")
        
        # Dados do m√™s mais recente e anterior para calcular deltas
        dados_atual = df_3_meses.iloc[0] if len(df_3_meses) > 0 else None
        dados_anterior = df_3_meses.iloc[1] if len(df_3_meses) > 1 else None
        
        if dados_atual is not None:
            col1, col2, col3 = st.columns(3)

            # --- KPI 1: Valor Recebido (R$) ---
            with col1:
                valor_recebido = dados_atual['vlTotalAcs']
                delta_valor = float(valor_recebido - dados_anterior['vlTotalAcs']) if dados_anterior is not None else 0
                st.metric(
                    "Valor Recebido (R$)",
                    value=formatar_moeda_brasileira(valor_recebido),
                    delta=delta_valor if dados_anterior is not None else None,
                    delta_color="normal" # Verde para positivo, vermelho para negativo
                )

            # --- KPI 2: ACS Pagos ---
            with col2:
                acs_pagos = dados_atual['qtTotalPago']
                delta_acs = int(acs_pagos - dados_anterior['qtTotalPago']) if dados_anterior is not None else 0
                st.metric(
                    "ACS Pagos",
                    value=f"{int(acs_pagos)}",
                    delta=delta_acs if dados_anterior is not None else None,
                    delta_color="normal" # Verde para positivo, vermelho para negativo
                )

            # --- KPI 3: Valor Esperado (R$) ---
            with col3:
                valor_esperado = dados_atual['vlEsperado'] # Agora vlEsperado est√° calculado corretamente
                delta_esperado = float(valor_esperado - dados_anterior['vlEsperado']) if dados_anterior is not None else 0
                st.metric(
                    "Valor Esperado (R$)",
                    value=formatar_moeda_brasileira(valor_esperado),
                    delta=delta_esperado if dados_anterior is not None else None,
                    delta_color="normal" # Verde para positivo, vermelho para negativo
                )

                
        
        # === GR√ÅFICOS COMPARATIVOS ===
        st.header("üìà An√°lise Comparativa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∞ An√°lise Financeira")
            
            # Preparar dados para o gr√°fico financeiro
            meses = [comp.replace('/', '/') for comp in df_3_meses['competencia'].tolist()[::-1]]  # Ordem cronol√≥gica
            valores_esperados = df_3_meses['vlEsperado'].tolist()[::-1]
            valores_recebidos = df_3_meses['vlTotalAcs'].tolist()[::-1]
            
            fig_financeiro = go.Figure()
            fig_financeiro.add_trace(go.Bar(
                name='Valor Esperado',
                x=meses,
                y=valores_esperados,
                marker_color='#003366',  # Azul Escuro
                text=[f'R$ {v:,.0f}' for v in valores_esperados],
                textposition='auto'
            ))
            fig_financeiro.add_trace(go.Bar(
                name='Valor Recebido',
                x=meses,
                y=valores_recebidos,
                marker_color='#2ca02c',  # Verde Vibrante
                text=[f'R$ {v:,.0f}' for v in valores_recebidos],
                textposition='auto'
            ))
            
            fig_financeiro.update_layout(
                title='Compara√ß√£o: Esperado vs Recebido',
                xaxis_title='Compet√™ncia',
                yaxis_title='Valor (R$)',
                barmode='group',
                height=400
            )
            
            st.plotly_chart(fig_financeiro, use_container_width=True)
        
        with col2:
            st.subheader("üë• An√°lise de Pessoal")
            
            # Preparar dados para o gr√°fico de pessoal
            acs_credenciados = df_3_meses['qtTotalCredenciado'].tolist()[::-1]
            acs_pagos_lista = df_3_meses['qtTotalPago'].tolist()[::-1]
            
            fig_pessoal = go.Figure()
            fig_pessoal.add_trace(go.Bar(
                name='ACS Credenciados',
                x=meses,
                y=acs_credenciados,
                marker_color='#8c8c8c',  # Cinza M√©dio
                text=acs_credenciados,
                textposition='auto'
            ))
            fig_pessoal.add_trace(go.Bar(
                name='ACS Pagos',
                x=meses,
                y=acs_pagos_lista,
                marker_color='#ff7f0e',  # Laranja Intenso
                text=acs_pagos_lista,
                textposition='auto'
            ))
            
            fig_pessoal.update_layout(
                title='Compara√ß√£o: Credenciados vs Pagos',
                xaxis_title='Compet√™ncia',
                yaxis_title='Quantidade de ACS',
                barmode='group',
                height=400
            )
            
            st.plotly_chart(fig_pessoal, use_container_width=True)
        
        # === TABELA DE RESUMO DETALHADA ===
        st.header("üìã Resumo Detalhado por M√™s")
        
        # Criar DataFrame para tabela com varia√ß√µes calculadas
        tabela_resumo = []
        
        for i, row in df_3_meses.iterrows():
            # Encontrar dados do m√™s anterior para calcular varia√ß√£o
            mes_anterior = None
            idx_atual = df_3_meses.index.get_loc(i)
            if idx_atual < len(df_3_meses) - 1:
                mes_anterior = df_3_meses.iloc[idx_atual + 1]
            
            # Calcular varia√ß√µes
            var_valor = row['vlTotalAcs'] - mes_anterior['vlTotalAcs'] if mes_anterior is not None else 0
            var_acs = row['qtTotalPago'] - mes_anterior['qtTotalPago'] if mes_anterior is not None else 0
            perda_ganho = var_valor  # Simplificado - pode ser refinado
            
            tabela_resumo.append({
                'M√™s/Ano': row['competencia'],
                'Valor Recebido (R$)': row['vlTotalAcs'],
                'Varia√ß√£o vs. M√™s Ant. (R$)': var_valor,
                'ACS Pagos': int(row['qtTotalPago']),
                'Varia√ß√£o vs. M√™s Ant. (Qtd.)': int(var_acs),
                'Perda/Ganho (R$)': perda_ganho
            })
        
        df_tabela = pd.DataFrame(tabela_resumo)
        
        # Fun√ß√£o para colorir valores negativos e positivos
        def color_negative_red_positive_green(val):
            if isinstance(val, (int, float)):
                if val < 0:
                    return 'color: #D32F2F; font-weight: bold;'  # Vermelho
                elif val > 0:
                    return 'color: #388E3C; font-weight: bold;'  # Verde
            return ''
        
        # Aplicar formata√ß√£o e cores
        styled_table = df_tabela.style.applymap(
            color_negative_red_positive_green,
            subset=['Varia√ß√£o vs. M√™s Ant. (R$)', 'Varia√ß√£o vs. M√™s Ant. (Qtd.)', 'Perda/Ganho (R$)']
        ).format({
            'Valor Recebido (R$)': 'R$ {:,.2f}',
            'Varia√ß√£o vs. M√™s Ant. (R$)': 'R$ {:+,.2f}',
            'ACS Pagos': '{:,d}',
            'Varia√ß√£o vs. M√™s Ant. (Qtd.)': '{:+,d}',
            'Perda/Ganho (R$)': 'R$ {:+,.2f}'
        })
        
        st.dataframe(styled_table, use_container_width=True, hide_index=True)
        
        # === SE√á√ÉO REGULAMENTAR ===
        st.markdown("---")  # Separador visual
        st.subheader("‚öñÔ∏è Status Regulamentar")
        
        # Verificar condi√ß√µes de suspens√£o baseado nos dados atuais
        if detectar_condicoes_suspensao(dados_atual, df_3_meses):
            render_suspension_status_card(dados_atual, df_3_meses, municipio_selecionado)
        else:
            st.success("‚úÖ Munic√≠pio em conformidade com as normas regulamentares vigentes")
        
        # === BOT√ÉO PARA GERAR PDF ===
        st.markdown("---")
        st.subheader("üìÑ Exportar Relat√≥rio")
        
        col_pdf1, col_pdf2, col_pdf3 = st.columns([2, 1, 2])
        with col_pdf2:
            if st.button("üìÑ Gerar PDF", type="secondary", use_container_width=True):
                with st.spinner("Gerando PDF do relat√≥rio..."):
                    try:
                        # Gerar nome do arquivo
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        municipio_limpo = municipio_selecionado.split('/')[0].replace(' ', '_')
                        nome_arquivo = f"Relatorio_ACS_{municipio_limpo}_{timestamp}.pdf"
                        
                        # Gerar PDF usando o novo PDFGenerator com proper resource management
                        pdf_buffer = gerar_pdf_municipal(
                            municipio_selecionado, 
                            uf_selecionada, 
                            df_3_meses, 
                            dados_atual, 
                            competencias_desejadas
                        )
                        
                        # Bot√£o de download
                        st.download_button(
                            label="‚¨áÔ∏è Download PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=nome_arquivo,
                            mime="application/pdf",
                            type="primary",
                            use_container_width=True
                        )
                        
                        st.success("‚úÖ PDF gerado com sucesso! Clique em 'Download PDF' para baixar.")
                        
                    except ImportError as e:
                        st.error("‚ùå Erro de depend√™ncias: Algumas bibliotecas necess√°rias n√£o est√£o instaladas.")
                        st.warning("Execute: `pip install reportlab kaleido Pillow`")
                        st.code(f"Detalhes do erro: {str(e)}")
                        
                    except Exception as e:
                        st.error(f"‚ùå Erro ao gerar PDF: {str(e)}")
                        
                        # Provide user-friendly error messages with troubleshooting tips
                        if "chart" in str(e).lower() or "plotly" in str(e).lower():
                            st.warning("üí° **Dica**: Erro relacionado √† gera√ß√£o de gr√°ficos. Verifique se o Kaleido est√° instalado: `pip install kaleido`")
                        elif "memory" in str(e).lower() or "resource" in str(e).lower():
                            st.warning("üí° **Dica**: Erro de mem√≥ria. Tente fechar outras aplica√ß√µes ou reiniciar o sistema.")
                        elif "permission" in str(e).lower() or "access" in str(e).lower():
                            st.warning("üí° **Dica**: Erro de permiss√£o. Verifique se voc√™ tem permiss√£o para criar arquivos tempor√°rios.")
                        else:
                            st.warning("üí° **Dica**: Erro inesperado. Tente novamente ou contate o suporte t√©cnico.")
                        
                        # Show detailed error for debugging (in expander to avoid cluttering UI)
                        with st.expander("üîß Detalhes t√©cnicos do erro"):
                            st.code(f"Tipo do erro: {type(e).__name__}\nMensagem: {str(e)}")
                            st.markdown("**Poss√≠veis solu√ß√µes:**")
                            st.markdown("- Verifique se todas as depend√™ncias est√£o instaladas")
                            st.markdown("- Reinicie a aplica√ß√£o")
                            st.markdown("- Verifique se h√° espa√ßo suficiente em disco")
                            st.markdown("- Contate o administrador do sistema se o problema persistir")
        
    else:
        st.error("‚ùå Nenhum dado foi encontrado para o munic√≠pio e per√≠odo selecionados.")

elif analisar_manualmente:
    st.error("‚ö†Ô∏è Por favor, selecione UF, munic√≠pio e compet√™ncia de refer√™ncia antes de analisar.")

else:
    # Informa√ß√µes sobre o sistema quando nada foi selecionado
    st.markdown("---")
    st.info("üëÜ **Selecione um estado, munic√≠pio e per√≠odo para come√ßar a an√°lise**")
    
    # Exemplo com dados de teste
    with st.expander("üí° Exemplo de An√°lise - Dados de Teste"):
        st.markdown("""
        **Munic√≠pio exemplo:** Abar√©/PE (Pernambuco)
        - Este munic√≠pio possui dados ACS dispon√≠veis para teste
        - Per√≠odo recomendado: 2025/06 
        - Use este exemplo para explorar as funcionalidades do sistema
        
        **Funcionalidades da An√°lise Municipal:**
        - üìä KPIs principais com varia√ß√µes mensais
        - üìà Gr√°ficos comparativos (financeiro e pessoal)
        - üìã Tabela detalhada com hist√≥rico de 3 meses
        - üîç Busca autom√°tica em dados locais e API
        
        **Navega√ß√£o:**
        - Use a barra lateral para acessar outras an√°lises
        - **Vis√£o Estadual**: Comparar munic√≠pios de um estado
        - **Multi-Compet√™ncia**: An√°lise temporal completa
        """)

# Copyright na barra lateral
st.sidebar.markdown("---")
st.sidebar.markdown(
    "<div style='text-align: center; color: #888; font-size: 0.8em; margin-top: 2rem;'>"
    "¬© Mais Gestor (2025)<br>"
    "Todos os direitos reservados"
    "</div>", 
    unsafe_allow_html=True
)