import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import requests
import json
from datetime import datetime
from saude_api import SaudeApi
from acs_analyzer import ACSAnalyzer, ACSMetrics, ACSDetalhePeriodo

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard ACS - Agentes Comunit√°rios de Sa√∫de",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS customizado para melhorar o visual
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ff6b6b;
    }
    .success-card {
        border-left-color: #51cf66;
    }
    .warning-card {
        border-left-color: #ffd43b;
    }
    .error-card {
        border-left-color: #ff6b6b;
    }
    .big-font {
        font-size: 2rem;
        font-weight: bold;
    }
    .medium-font {
        font-size: 1.2rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

def fazer_requisicao_saude(codigo_uf: str, codigo_municipio: str, parcela_inicio: str, parcela_fim: str, tipo_relatorio: str = "COMPLETO"):
    """
    Faz requisi√ß√£o para a API do Minist√©rio da Sa√∫de com headers corretos (fun√ß√£o original)
    """
    params = {
        "unidadeGeografica": "MUNICIPIO",
        "coUf": codigo_uf,
        "coMunicipio": codigo_municipio,
        "nuParcelaInicio": parcela_inicio,
        "nuParcelaFim": parcela_fim,
        "tipoRelatorio": tipo_relatorio
    }
    
    # Headers necess√°rios baseados na requisi√ß√£o original
    headers = {
        'Accept': 'application/json, text/plain, */*',
        'Accept-Encoding': 'gzip, deflate, br, zstd',
        'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Host': 'relatorioaps-prd.saude.gov.br',
        'Origin': 'https://relatorioaps.saude.gov.br',
        'Pragma': 'no-cache',
        'Referer': 'https://relatorioaps.saude.gov.br/',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-site',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"'
    }
    
    try:
        with st.spinner("üîç Consultando dados de ACS..."):
            st.info(f"Consultando: UF={codigo_uf}, Munic√≠pio={codigo_municipio}, Compet√™ncia={parcela_inicio}")
            response = requests.get(
                "https://relatorioaps-prd.saude.gov.br/financiamento/pagamento", 
                params=params, 
                headers=headers, 
                timeout=30
            )
            
            # Debug da resposta
            st.write(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                dados = response.json()
                if dados:
                    # Debug da estrutura dos dados
                    st.info("‚úÖ JSON recebido com sucesso!")
                    
                    # Verifica se√ß√£o resumosPlanosOrcamentarios
                    if 'resumosPlanosOrcamentarios' in dados:
                        resumos = dados['resumosPlanosOrcamentarios']
                        st.write(f"üìä Resumos or√ßament√°rios: {len(resumos)} registros")
                        
                        # Verifica se h√° dados de ACS em resumos
                        acs_records_resumos = [r for r in resumos if 'qtTetoAcs' in r]
                        if acs_records_resumos:
                            st.success(f"üéØ Encontrados {len(acs_records_resumos)} registros com dados de ACS em resumos!")
                        else:
                            st.warning("‚ö†Ô∏è Nenhum registro em resumos cont√©m dados de ACS")
                    
                    # Verifica se√ß√£o pagamentos (onde est√£o os dados de ACS)
                    if 'pagamentos' in dados:
                        pagamentos = dados['pagamentos']
                        st.write(f"üí∞ Pagamentos: {len(pagamentos)} registros")
                        
                        # Verifica se h√° dados de ACS em pagamentos
                        acs_records_pagamentos = [r for r in pagamentos if 'qtTetoAcs' in r]
                        if acs_records_pagamentos:
                            st.success(f"üéØ Encontrados {len(acs_records_pagamentos)} registros com dados de ACS em pagamentos!")
                            # Mostra exemplo dos campos encontrados
                            primeiro = acs_records_pagamentos[0]
                            st.write("üìã Campos de ACS encontrados:")
                            acs_fields = [k for k in primeiro.keys() if 'acs' in k.lower() or 'Acs' in k]
                            st.write(f"- {len(acs_fields)} campos: {', '.join(acs_fields[:10])}{'...' if len(acs_fields) > 10 else ''}")
                        else:
                            st.warning("‚ö†Ô∏è Nenhum registro em pagamentos cont√©m dados de ACS")
                    else:
                        st.warning("‚ö†Ô∏è Se√ß√£o 'pagamentos' n√£o encontrada no JSON")
                    
                    return dados
                else:
                    st.warning("API retornou dados vazios. Verifique se o munic√≠pio possui dados para o per√≠odo selecionado.")
                    return None
            else:
                st.error(f"Erro HTTP {response.status_code}: {response.text}")
                return None
                
    except requests.RequestException as e:
        st.error(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None
    except json.JSONDecodeError as e:
        st.error(f"Erro ao decodificar JSON: {e}")
        st.write("Resposta recebida:", response.text[:500] + "..." if len(response.text) > 500 else response.text)
        return None

def create_kpi_cards(metrics: ACSMetrics):
    """Cria cards com KPIs principais"""
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        eficiencia_icon, eficiencia_tipo, eficiencia_desc = ACSAnalyzer.get_efficiency_status(metrics.eficiencia)
        st.markdown(f"""
        <div class="metric-card {eficiencia_tipo}-card">
            <h4>{eficiencia_icon} Efici√™ncia Geral</h4>
            <div class="big-font">{ACSAnalyzer.format_percentage(metrics.eficiencia)}</div>
            <div>{eficiencia_desc} - {metrics.pagos_total}/{metrics.teto_acs} ACS pagos</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h4>üéØ Taxa de Ocupa√ß√£o</h4>
            <div class="big-font">{ACSAnalyzer.format_percentage(metrics.taxa_ocupacao)}</div>
            <div>{metrics.credenciados_total}/{metrics.teto_acs} credenciados</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h4>üí∞ Taxa de Pagamento</h4>
            <div class="big-font">{ACSAnalyzer.format_percentage(metrics.taxa_pagamento)}</div>
            <div>{metrics.pagos_total}/{metrics.credenciados_total} pagos</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        cor_perda = "success" if metrics.perda_financeira <= 0 else ("warning" if metrics.perda_percentual < 10 else "error")
        st.markdown(f"""
        <div class="metric-card {cor_perda}-card">
            <h4>üìâ Perda Financeira</h4>
            <div class="big-font">{ACSAnalyzer.format_currency(abs(metrics.perda_financeira))}</div>
            <div>{ACSAnalyzer.format_percentage(abs(metrics.perda_percentual))} do previsto</div>
        </div>
        """, unsafe_allow_html=True)

def create_summary_chart(metrics: ACSMetrics):
    """Cria gr√°fico de barras com resumo quantitativo"""
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Teto',
        x=['ACS'],
        y=[metrics.teto_acs],
        marker_color='lightblue',
        text=[metrics.teto_acs],
        textposition='auto'
    ))
    
    fig.add_trace(go.Bar(
        name='Credenciados',
        x=['ACS'],
        y=[metrics.credenciados_total],
        marker_color='orange',
        text=[metrics.credenciados_total],
        textposition='auto'
    ))
    
    fig.add_trace(go.Bar(
        name='Pagos',
        x=['ACS'],
        y=[metrics.pagos_total],
        marker_color='green',
        text=[metrics.pagos_total],
        textposition='auto'
    ))
    
    fig.update_layout(
        title="üìä Resumo Quantitativo - ACS",
        yaxis_title="Quantidade",
        barmode='group',
        height=400
    )
    
    return fig

def create_timeline_chart(timeline: list):
    """Cria gr√°fico temporal da evolu√ß√£o dos ACS"""
    
    if not timeline:
        return None
    
    df = pd.DataFrame([{
        'Parcela': t.parcela,
        'Teto': t.teto,
        'Credenciados': t.credenciados_direto + t.credenciados_indireto,
        'Pagos': t.pagos_direto + t.pagos_indireto,
        'Valor Total': t.valor_total
    } for t in timeline])
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('Evolu√ß√£o Quantitativa', 'Evolu√ß√£o Financeira'),
        specs=[[{"secondary_y": False}], [{"secondary_y": False}]]
    )
    
    # Gr√°fico quantitativo
    fig.add_trace(
        go.Scatter(x=df['Parcela'], y=df['Teto'], name='Teto', line=dict(color='lightblue', width=3)),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=df['Parcela'], y=df['Credenciados'], name='Credenciados', line=dict(color='orange', width=3)),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=df['Parcela'], y=df['Pagos'], name='Pagos', line=dict(color='green', width=3)),
        row=1, col=1
    )
    
    # Gr√°fico financeiro
    fig.add_trace(
        go.Bar(x=df['Parcela'], y=df['Valor Total'], name='Valor Recebido', marker_color='darkgreen'),
        row=2, col=1
    )
    
    fig.update_layout(height=700, title_text="üìà Evolu√ß√£o Temporal dos ACS")
    fig.update_xaxes(title_text="Parcela", row=2, col=1)
    fig.update_yaxes(title_text="Quantidade", row=1, col=1)
    fig.update_yaxes(title_text="Valor (R$)", row=2, col=1)
    
    return fig

def create_distribution_chart(metrics: ACSMetrics):
    """Cria gr√°ficos de distribui√ß√£o direto/indireto"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico pizza - Credenciados
        fig_cred = px.pie(
            values=[metrics.credenciados_direto, metrics.credenciados_indireto],
            names=['Direto', 'Indireto'],
            title="üìä Distribui√ß√£o de Credenciados",
            color_discrete_sequence=['#ff9999', '#66b3ff']
        )
        st.plotly_chart(fig_cred, use_container_width=True)
    
    with col2:
        # Gr√°fico pizza - Valores
        fig_val = px.pie(
            values=[metrics.valor_recebido_direto, metrics.valor_recebido_indireto],
            names=['Direto', 'Indireto'],
            title="üí∞ Distribui√ß√£o de Valores",
            color_discrete_sequence=['#99ff99', '#ffcc99']
        )
        st.plotly_chart(fig_val, use_container_width=True)

def create_detailed_table(timeline: list):
    """Cria tabela detalhada por compet√™ncia"""
    
    if not timeline:
        return None
    
    data = []
    for t in timeline:
        data.append({
            'Compet√™ncia': t.competencia,
            'Parcela': t.parcela,
            'Teto': t.teto,
            'Cred. Direto': t.credenciados_direto,
            'Cred. Indireto': t.credenciados_indireto,
            'Total Cred.': t.credenciados_direto + t.credenciados_indireto,
            'Pagos Direto': t.pagos_direto,
            'Pagos Indireto': t.pagos_indireto,
            'Total Pagos': t.pagos_direto + t.pagos_indireto,
            'Valor Direto': ACSAnalyzer.format_currency(t.valor_direto),
            'Valor Indireto': ACSAnalyzer.format_currency(t.valor_indireto),
            'Valor Total': ACSAnalyzer.format_currency(t.valor_total)
        })
    
    df = pd.DataFrame(data)
    return df

def main():
    # Cabe√ßalho
    st.title("üè• Dashboard ACS - Agentes Comunit√°rios de Sa√∫de")
    st.markdown("**Sistema de monitoramento e an√°lise de ACS por munic√≠pio**")
    
    st.markdown("---")
    
    # Interface completa (igual ao app.py original)
    st.subheader("üîç Configura√ß√µes da Consulta")
    
    # Carregamento das UFs
    ufs = SaudeApi.get_ufs()
    
    if not ufs:
        st.error("N√£o foi poss√≠vel carregar a lista de UFs. Verifique sua conex√£o.")
        return
    
    # Sele√ß√£o da UF
    uf_options = ["Selecione um estado..."] + [SaudeApi.formatar_uf_para_dropdown(uf) for uf in ufs]
    uf_selecionada = st.selectbox("üó∫Ô∏è Estado (UF)", uf_options)
    
    municipio_selecionado = None
    codigo_uf = None
    codigo_municipio = None
    
    if uf_selecionada != "Selecione um estado...":
        # Encontra o c√≥digo da UF selecionada
        codigo_uf = SaudeApi.extrair_codigo_uf(uf_selecionada, ufs)
        
        if codigo_uf:
            # Carregamento dos munic√≠pios
            municipios = SaudeApi.get_municipios_por_uf(codigo_uf)
            
            if municipios:
                municipio_options = ["Selecione um munic√≠pio..."] + [SaudeApi.formatar_municipio_para_dropdown(municipio) for municipio in municipios]
                municipio_selecionado = st.selectbox("üèòÔ∏è Munic√≠pio", municipio_options)
                
                if municipio_selecionado != "Selecione um munic√≠pio...":
                    codigo_municipio = SaudeApi.extrair_codigo_municipio(municipio_selecionado, municipios)
    
    # Configura√ß√µes de per√≠odo
    st.subheader("üìÖ Per√≠odo")
    
    # Carrega anos dispon√≠veis
    anos_disponiveis = SaudeApi.get_anos_disponiveis()
    
    if anos_disponiveis:
        # Campos de per√≠odo - single compet√™ncia
        col1, col2 = st.columns(2)
        with col1:
            ano_consulta = st.selectbox("Ano da compet√™ncia", anos_disponiveis, index=0 if anos_disponiveis else 0)
        
        with col2:
            mes_consulta = st.number_input("M√™s da compet√™ncia", min_value=1, max_value=12, value=6)
        
        # Mostra parcelas dispon√≠veis se um ano estiver selecionado
        if ano_consulta:
            parcelas_competencia = SaudeApi.get_parcelas_por_ano(ano_consulta)
            if parcelas_competencia:
                st.info(f"üìä {len(parcelas_competencia)} parcelas dispon√≠veis em {ano_consulta}")
    else:
        # Fallback para campos manuais
        ano_atual = datetime.now().year
        col1, col2 = st.columns(2)
        with col1:
            ano_consulta = st.number_input("Ano da compet√™ncia", min_value=2020, max_value=ano_atual, value=ano_atual)
        
        with col2:
            mes_consulta = st.number_input("M√™s da compet√™ncia", min_value=1, max_value=12, value=6)
    
    # Formata√ß√£o das parcelas - usando compet√™ncia √∫nica como solicitado
    parcela_inicio = f"{ano_consulta}{mes_consulta:02d}"
    parcela_fim = parcela_inicio  # Mesma compet√™ncia para in√≠cio e fim
    
    # Tipo de relat√≥rio
    tipo_relatorio = st.selectbox("üìä Tipo de Relat√≥rio", ["COMPLETO", "RESUMIDO"])
    
    # Bot√£o de consulta
    if codigo_uf and codigo_municipio:
        st.success(f"‚úÖ Configurado: {uf_selecionada} ‚Üí {municipio_selecionado}")
        
        # Informa√ß√µes da requisi√ß√£o
        with st.expander("‚ÑπÔ∏è Detalhes da Requisi√ß√£o"):
            st.write(f"**Estado:** {uf_selecionada} (C√≥digo: {codigo_uf})")
            st.write(f"**Munic√≠pio:** {municipio_selecionado} (C√≥digo: {codigo_municipio})")
            st.write(f"**Compet√™ncia:** {parcela_inicio}")
            st.write(f"**Tipo:** {tipo_relatorio}")
        
        # Bot√£o para fazer requisi√ß√£o
        if st.button("üöÄ Consultar Dados de ACS", type="primary", use_container_width=True):
            dados = fazer_requisicao_saude(codigo_uf, codigo_municipio, parcela_inicio, parcela_fim, tipo_relatorio)
        
            if dados:
                # Analisa dados de ACS
                metrics = ACSAnalyzer.extract_acs_data(dados)
                timeline = ACSAnalyzer.extract_acs_timeline(dados)
                
                if metrics:
                    st.markdown("---")
                
                    # Cabe√ßalho do munic√≠pio
                    st.header(f"üìä {metrics.municipio} - {metrics.estado}")
                    st.caption(f"√öltima atualiza√ß√£o: {metrics.data_atualizacao} | Compet√™ncias: {len(metrics.competencias)}")
                    
                    # Inicializa vari√°vel para evitar erro
                    df_detalhado = None
                    
                    # KPIs principais
                    st.subheader("üìà Indicadores Principais")
                    create_kpi_cards(metrics)
                    
                    st.markdown("---")
                    
                    # Gr√°ficos
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìä Resumo Quantitativo")
                        fig_summary = create_summary_chart(metrics)
                        st.plotly_chart(fig_summary, use_container_width=True)
                    
                    with col2:
                        st.subheader("üîÑ Distribui√ß√£o Direto/Indireto")
                        create_distribution_chart(metrics)
                    
                    # Evolu√ß√£o temporal
                    if timeline and len(timeline) > 1:
                        st.subheader("üìà Evolu√ß√£o Temporal")
                        fig_timeline = create_timeline_chart(timeline)
                        if fig_timeline:
                            st.plotly_chart(fig_timeline, use_container_width=True)
                    
                    # Resumo financeiro
                    st.subheader("üí∞ Resumo Financeiro")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "üíµ Valor Recebido Total",
                            ACSAnalyzer.format_currency(metrics.valor_recebido_total),
                            help="Total recebido em todas as compet√™ncias"
                        )
                    
                    with col2:
                        st.metric(
                            "üéØ Valor Previsto Total",
                            ACSAnalyzer.format_currency(metrics.valor_previsto_total),
                            help="Valor que deveria ser recebido (estimativa)"
                        )
                    
                    with col3:
                        delta_color = "inverse" if metrics.perda_financeira > 0 else "normal"
                        st.metric(
                            "üìâ Diferen√ßa",
                            ACSAnalyzer.format_currency(abs(metrics.perda_financeira)),
                            delta=f"{ACSAnalyzer.format_percentage(metrics.perda_percentual)} {'perda' if metrics.perda_financeira > 0 else 'economia'}",
                            delta_color=delta_color
                        )
                    
                    # Tabela detalhada
                    if timeline:
                        st.subheader("üìã Detalhamento por Compet√™ncia")
                        df_detalhado = create_detailed_table(timeline)
                        if df_detalhado is not None:
                            st.dataframe(df_detalhado, use_container_width=True)
                    
                    # Download dos dados
                    st.subheader("‚¨áÔ∏è Exportar Dados")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # JSON dos dados brutos
                        json_string = json.dumps(dados, indent=2, ensure_ascii=False)
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        filename_json = f"dados_acs_{municipio_selecionado.replace(' ', '_')}_{timestamp}.json"
                        
                        st.download_button(
                            label="üì• Baixar JSON Completo",
                            data=json_string,
                            file_name=filename_json,
                            mime="application/json"
                        )
                    
                    with col2:
                        # CSV da tabela detalhada
                        if df_detalhado is not None:
                            csv_string = df_detalhado.to_csv(index=False, encoding='utf-8-sig')
                            filename_csv = f"resumo_acs_{municipio_selecionado.replace(' ', '_')}_{timestamp}.csv"
                            
                            st.download_button(
                                label="üìä Baixar Resumo CSV",
                                data=csv_string,
                                file_name=filename_csv,
                                mime="text/csv"
                            )
                    
                else:
                    st.warning("‚ö†Ô∏è Nenhum dado de ACS encontrado para este munic√≠pio no per√≠odo consultado.")
                    st.info("üí° **Dica**: Nem todos os munic√≠pios possuem dados de ACS dispon√≠veis.")
            
            else:
                st.error("‚ùå Erro ao consultar dados. Verifique a conex√£o e tente novamente.")
    
    else:
        # Informa√ß√µes sobre o sistema
        st.markdown("---")
        st.info("üëà **Selecione um estado e munic√≠pio para consultar os dados de ACS**")
        
        # Bot√£o de exemplo
        if st.button("üìã Usar Exemplo: Abar√©/PE (com dados ACS)", type="secondary", use_container_width=True):
            st.info("üìç **Exemplo configurado**: PE - Pernambuco ‚Üí Abar√©")
            st.write("üîß **Configura√ß√£o manual necess√°ria**:")
            st.write("1. Selecione **PE - Pernambuco** na lista de estados")
            st.write("2. Escolha **ABAR√â** na lista de munic√≠pios")
            st.write("3. Configure compet√™ncia 2025/06")
            st.write("4. Clique **'Consultar Dados de ACS'**")
            st.success("‚úÖ Este munic√≠pio **tem dados de ACS confirmados**!")
        
        with st.expander("‚ÑπÔ∏è Sobre o Dashboard ACS"):
            st.markdown("""
            Este dashboard permite consultar e analisar dados dos **Agentes Comunit√°rios de Sa√∫de (ACS)** 
            atrav√©s da API oficial do Minist√©rio da Sa√∫de.
            
            **üìä M√©tricas Dispon√≠veis:**
            - üéØ **Quantidade teto**: N√∫mero m√°ximo de ACS aprovado para o munic√≠pio
            - ‚úÖ **ACS credenciados**: Quantidade de ACS habilitados (direto + indireto)
            - üí∞ **ACS pagos**: Quantidade de ACS que receberam pagamento
            - üíµ **Valores financeiros**: Montantes transferidos e previstos
            - üìà **Indicadores**: Taxa de ocupa√ß√£o, pagamento e efici√™ncia
            
            **üîÑ Tipos de ACS:**
            - **Direto**: ACS vinculado diretamente ao munic√≠pio
            - **Indireto**: ACS vinculado atrav√©s de organiza√ß√µes parceiras
            
            **üìÖ Per√≠odo de Consulta:**
            - Dados de Janeiro a Julho de 2025
            - M√∫ltiplas compet√™ncias para an√°lise temporal
            
            **‚ö†Ô∏è Importante:**
            - Nem todos os munic√≠pios possuem dados de ACS
            - Use o exemplo **Abar√©/PE** para testar (dados confirmados)
            
            **üöÄ Como usar:**
            1. Selecione o estado (UF)
            2. Escolha o munic√≠pio  
            3. Configure o per√≠odo
            4. Clique em "Consultar Dados de ACS"
            5. Analise os dados no dashboard
            6. Fa√ßa download dos relat√≥rios se necess√°rio
            """)

if __name__ == "__main__":
    main()